00001 /* Auto-generated by genmsg_cpp for file /home/rosbuild/hudson/workspace/doc-electric-cob_common/doc_stacks/2013-03-01_14-38-37.978792/cob_common/brics_actuator/msg/JointPositions.msg */
#ifndef BRICS_ACTUATOR_MESSAGE_JOINTPOSITIONS_H
#define BRICS_ACTUATOR_MESSAGE_JOINTPOSITIONS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"
 
#include "ros/assert.h"

#include "brics_actuator/Poison.h"
#include "brics_actuator/JointValue.h"

namespace youBot
{
template <class ContainerAllocator>
 struct JointPWMs_ {
  typedef JointPWMs_<ContainerAllocator> Type;  ////

  JointPWMs_()
  : poisonStamp()
   , pwms()
   {
   }
 
   JointPositions_(const ContainerAllocator& _alloc)
  : poisonStamp(_alloc)
  , pwms(_alloc)
   {
  }

  typedef  ::brics_actuator::Poison_<ContainerAllocator>  _poisonStamp_type;
    ::brics_actuator::Poison_<ContainerAllocator>  poisonStamp;

   typedef std::vector< ::brics_actuator::JointValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::brics_actuator::JointValue_<ContainerAllocator> >::other >  _pwms_type;
   std::vector< ::brics_actuator::JointValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::brics_actuator::JointValue_<ContainerAllocator> >::other >  pwms;
 
 
   ROS_DEPRECATED uint32_t get_pwms_size() const { return (uint32_t)pwms.size(); }
   ROS_DEPRECATED void set_pwms_size(uint32_t size) { pwms.resize((size_t)size); }
   ROS_DEPRECATED void get_pwms_vec(std::vector< ::brics_actuator::JointValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::brics_actuator::JointValue_<ContainerAllocator> >::other > & vec) const { vec = this->pwms; }
   ROS_DEPRECATED void set_pwms_vec(const std::vector< ::brics_actuator::JointValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::brics_actuator::JointValue_<ContainerAllocator> >::other > & vec) { this->pwms = vec; }
private:
  static const char* __s_getDataType_() { return "brics_actuator/JointPWMs"; }
 public:
   ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
   static const char* __s_getMD5Sum_() { return "42f78dd80f99e0208248b8a257b8a645"; }//////////////////////////////////////////////////????????????????????????????
public:
   ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }
    ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }


 
 private:
  static const char* __s_getMessageDefinition_() { return "Poison poisonStamp\n\
 JointValue[] positions\n\
 \n\
 ================================================================================\n\
 MSG: brics_actuator/Poison\n\
 string originator               # node id\n\
 string description              # encoding still an issue\n\
 float32 qos                     # reliability of the channel\n\
                                 # 0..1 where 1 means healthy\n\
 \n\
 ================================================================================\n\
 MSG: brics_actuator/JointValue\n\
 time timeStamp          #time of the data \n\
 string joint_uri\n\
 string unit             #if empy expects si units, you can use boost::unit\n\
 float64 value\n\
 \n\
 "; }
 public:
   ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }
 
   ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }
 
   ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
   {
     ros::serialization::OStream stream(write_ptr, 1000000000);
     ros::serialization::serialize(stream, poisonStamp);
     ros::serialization::serialize(stream, pwms);
     return stream.getData();
  }
 
   ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
   {
     ros::serialization::IStream stream(read_ptr, 1000000000);
     ros::serialization::deserialize(stream, poisonStamp);
    ros::serialization::deserialize(stream, pwms);
     return stream.getData();
   }
 
   ROS_DEPRECATED virtual uint32_t serializationLength() const
   {
     uint32_t size = 0;
     size += ros::serialization::serializationLength(poisonStamp);
     size += ros::serialization::serializationLength(pwms);
     return size;
   }
 
   typedef boost::shared_ptr< ::brics_actuator::JointPWMs_<ContainerAllocator> > Ptr;
   typedef boost::shared_ptr< ::brics_actuator::JointPWMs_<ContainerAllocator>  const> ConstPtr;
   boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
 }; // struct JointPositions
 typedef  ::brics_actuator::JointPWMs_<std::allocator<void> > JointPWMs;
 
 typedef boost::shared_ptr< ::brics_actuator::JointPWMs> JointPWMsPtr;
 typedef boost::shared_ptr< ::brics_actuator::JointPWMs const> JointPositionsConstPtr;
 
 
 template<typename ContainerAllocator>
 std::ostream& operator<<(std::ostream& s, const  ::brics_actuator::JointPWMs_<ContainerAllocator> & v)
 {
   ros::message_operations::Printer< ::brics_actuator::JointPWMs_<ContainerAllocator> >::stream(s, "", v);
   return s;}
 
 } // namespace brics_actuator
 
 namespace ros
 {
 namespace message_traits
 {
 template<class ContainerAllocator> struct IsMessage< ::brics_actuator::JointPWMs_<ContainerAllocator> > : public TrueType {};
 template<class ContainerAllocator> struct IsMessage< ::brics_actuator::JointPWMs_<ContainerAllocator>  const> : public TrueType {};
 template<class ContainerAllocator>
 struct MD5Sum< ::brics_actuator::JointPositions_<ContainerAllocator> > {
   static const char* value() 
   {
     return "42f78dd80f99e0208248b8a257b8a645";  /////////////////////////?????????????????????????????????????????????
   }
 
   static const char* value(const  ::brics_actuator::JointPWMs_<ContainerAllocator> &) { return value(); } 
   static const uint64_t static_value1 = 0x42f78dd80f99e020ULL;//////////////
   static const uint64_t static_value2 = 0x8248b8a257b8a645ULL;
 };
 
 template<class ContainerAllocator>



 struct DataType< ::brics_actuator::JointPWMs_<ContainerAllocator> > {


  static const char* value() 
   {
     return "brics_actuator/JointPWMs";
   }
 
   static const char* value(const  ::brics_actuator::JointPWMs_<ContainerAllocator> &) { return value(); } 
 };
 
 template<class ContainerAllocator>
 struct Definition< ::brics_actuator::JointPWMs_<ContainerAllocator> > {
   static const char* value() 
   {
    return "Poison poisonStamp\n\
 JointValue[] positions\n\
 \n\
 ================================================================================\n\
 MSG: brics_actuator/Poison\n\
 string originator               # node id\n\
 string description              # encoding still an issue\n\
 float32 qos                     # reliability of the channel\n\
                               # 0..1 where 1 means healthy\n\
 \n\
 ================================================================================\n\
 MSG: brics_actuator/JointValue\n\
 time timeStamp          #time of the data \n\
 string joint_uri\n\
 string unit             #if empy expects si units, you can use boost::unit\n\
 float64 value\n\
 \n\
";
   }
 
   static const char* value(const  ::brics_actuator::JointPWMs_<ContainerAllocator> &) { return value(); } 
 };
 
 } // namespace message_traits
 } // namespace ros
 
 namespace ros
 {
namespace serialization
 {
 
 template<class ContainerAllocator> struct Serializer< ::brics_actuator::JointPWMs_<ContainerAllocator> >
 {
   template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
   {
     stream.next(m.poisonStamp);
     stream.next(m.pwms);
   }
 
   ROS_DECLARE_ALLINONE_SERIALIZER;
 }; // struct JointPositions_
 } // namespace serialization
} // namespace ros


 namespace ros
 {
 namespace message_operations
 {
 
 template<class ContainerAllocator>
 struct Printer< ::brics_actuator::JointPWMs_<ContainerAllocator> >
 {
   template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::brics_actuator::JointPWMs_<ContainerAllocator> & v) 
   {
     s << indent << "poisonStamp: ";
 s << std::endl;
     Printer< ::brics_actuator::Poison_<ContainerAllocator> >::stream(s, indent + "  ", v.poisonStamp);
     s << indent << "pwms[]" << std::endl;
     for (size_t i = 0; i < v.positions.size(); ++i)
     {
       s << indent << "  positions[" << i << "]: ";
       s << std::endl;
       s << indent;

       Printer< ::brics_actuator::JointValue_<ContainerAllocator> >::stream(s, indent + "    ", v.pwms[i]);
     }
   }
};
 

 } // namespace message_operations




} // namespace ros
 
#endif // BRICS_ACTUATOR_MESSAGE_JOINTPOSITIONS_H

